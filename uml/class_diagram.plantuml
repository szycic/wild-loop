@startuml
title Class Diagram

!theme plain
top to bottom direction
skinparam linetype ortho

class Animal {
  + Animal(Position, int, int): 
  # MAX_ENERGY: int
  # MOVE_ENERGY_COST: int
  - age: int
  # REPRODUCTION_ENERGY_COST: int
  # OFFSPRING_ENERGY: int
  - energy: int
  - maxAge: int
  - position: Position
  # REPRODUCTION_ENERGY_THRESHOLD: int
  # world: World
  + getAge(): int
  + incrementAge(): void
  + update(): void
  + setEnergy(int): void
  + getMaxAge(): int
  # getNextMoveDirection(): Direction
  + getEnergy(): int
  + die(): void
  + setPosition(Position): void
  - findEmptyAdjacentCell(): Position?
  ~ reproduce(): void
  # createOffspring(Position): Animal
  ~ move(): void
  + getPosition(): Position
  + setWorld(World): void
  # eat(): void
}
enum Direction << enumeration >> {
  - Direction(int, int): 
  - dy: int
  + NORTH: 
  + EAST: 
  + WEST: 
  - dx: int
  + SOUTH: 
  + getDx(): int
  + valueOf(String): Direction
  + getDy(): int
  + getRandom(): Direction
  + values(): Direction[]
}
class Main {
  + Main(): 
  + main(String[]): void
}
entity Position << record >> {
  + Position(int, int): 
  - x: int
  - y: int
  + directionTo(Position): Direction
  + y(): int
  + distanceTo(Position): int
  + directionFrom(Position): Direction
  + x(): int
  + newPosition(Direction): Position
}
class Predator {
  + Predator(Position, int, int): 
  - HUNT_RANGE: int
  - HUNT_ENERGY_GAIN: int
  # createOffspring(Position): Animal
  # getNextMoveDirection(): Direction
  # eat(): void
  - findNearestPrey(): Prey
}
class Prey {
  + Prey(Position, int, int): 
  - FLEE_RANGE: int
  - GRAZE_ENERGY_GAIN: int
  - findNearestPredator(): Predator
  # eat(): void
  # createOffspring(Position): Animal
  # getNextMoveDirection(): Direction
}
class SimulationConfig {
  + SimulationConfig(): 
  - properties: Properties
  + getValue(String): int
}
class SimulationPanel {
  + SimulationPanel(StartApp): 
  - world: World
  - timer: Timer
  - pauseButton: JButton
  - DEFAULT_PREY_COUNT: int
  - statsLabel: JLabel
  - DEFAULT_PREDATOR_COUNT: int
  - startApp: StartApp
  - gridLabels: JLabel[][]
  - isPaused: boolean
  - DEFAULT_WORLD_SIZE: int
  - updateStats(): void
  + startSimulation(): void
  - getRandomEmptyPosition(World): Position?
  + setSimulationParameters(int, int, int): void
  - initializeGrid(int): void
  - updateGrid(): void
  + resetSimulation(): void
  - togglePause(): void
  - stopSimulation(): void
}
class StartApp {
  + StartApp(): 
  - sizeField: JTextField
  - predatorField: JTextField
  - mainPanel: JPanel
  - cardLayout: CardLayout
  - preyField: JTextField
  - simulationPanel: SimulationPanel
  - createSettingsPanel(): JPanel
  + showMenu(): void
  - createMenuPanel(): JPanel
}
class World {
  + World(int, int): 
  - turns: int
  - animals: List<Animal>
  - grid: Animal[][]
  + removeAnimal(Animal): void
  + resetWorld(): void
  + isValidPosition(Position): boolean
  + getTurns(): int
  + addAnimal(Animal): void
  + isCellEmpty(Position): boolean
  + getAnimals(): List<Animal>
  + getWidth(): int
  + getHeight(): int
  + getGrid(): Animal[][]
  + tick(): void
}

Animal           "1" *-[#595959,plain]-> "position\n1" Position         
Animal           "1" *-[#595959,plain]-> "world\n1" World            
Predator          -[#000082,plain]-^  Animal           
Prey              -[#000082,plain]-^  Animal           
SimulationPanel   -[#595959,dashed]->  Position         : "«create»"
SimulationPanel   -[#595959,dashed]->  Predator         : "«create»"
SimulationPanel   -[#595959,dashed]->  Prey             : "«create»"
SimulationPanel  "1" *-[#595959,plain]-> "startApp\n1" StartApp         
SimulationPanel   -[#595959,dashed]->  World            : "«create»"
SimulationPanel  "1" *-[#595959,plain]-> "world\n1" World            
StartApp          -[#595959,dashed]->  SimulationPanel  : "«create»"
StartApp         "1" *-[#595959,plain]-> "simulationPanel\n1" SimulationPanel  
World            "1" *-[#595959,plain]-> "grid\n*" Animal           
World             -[#595959,dashed]->  Animal           : "«create»"
@enduml
